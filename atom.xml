<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Starsea's Note]]></title>
  <link href="http://starsea.github.io/atom.xml" rel="self"/>
  <link href="http://starsea.github.io/"/>
  <updated>2014-05-10T20:24:37+08:00</updated>
  <id>http://starsea.github.io/</id>
  <author>
    <name><![CDATA[starsea]]></name>
    <email><![CDATA[starsea820@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[install octopress on mac os x 10.9]]></title>
    <link href="http://starsea.github.io/posts/install-octopress-on-mac-os-x-10-dot-9/"/>
    <updated>2014-05-09T14:53:37+08:00</updated>
    <id>http://starsea.github.io/posts/install-octopress-on-mac-os-x-10-dot-9</id>
    <content type="html"><![CDATA[<p>安装方法就不多说了 详情见参考文献 说下注意初学者难理解的地方</p>

<p>整个项目分为两个部分 一部分是博客的源码 也就是source分支(除开<code>_deploy</code>目录之外的其他所有文件)<br/>
还有一部分是网站的静态资源(打开网站你看到的全部都是静态资源 所有的页面都是纯html页面) 这部分属于master分支 也就是<code>_deploy</code>整个目录 你可以这样看看</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>haidx@mbp:~/repo/octopress<span class="o">]</span><span class="nv">$ </span><span class="nb">cd </span>_deploy/
</span><span class='line'><span class="o">[</span>haidx@mbp:~/repo/octopress/_deploy<span class="o">]</span><span class="nv">$ </span>git status
</span><span class='line'><span class="c"># On branch master</span>
</span><span class='line'>nothing to commit, working directory clean
</span><span class='line'><span class="o">[</span>haidx@mbp:~/repo/octopress/_deploy<span class="o">]</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装好之后 运行 <code>rake new_post["myTitle"]</code> 会自动生成一个 markdown 文件</p>

<p>文章生成在目录下的<code>source/_posts</code>目录下。文章是markdown格式的。可以通过 <code>Mou</code> 软件来编辑保存。</p>

<p><code>rake generate</code> 根据 <code>_config.yml</code> 和 <code>source/_posts</code>下的 markdown 文件生成网站所有需要的静态资源.</p>

<p><code>rake deploy</code> 这个命令是把网站所有生成的静态资源放到 _deploy 目录下,然后把该目录下得所有文件推送到github的 master 分支.</p>

<p>发布之后运行<code>git status</code>之后发现还是有很多修改文件 , 没错 因为 <code>rake deploy</code> 并没有 push source 分支过去. 如有需要 可以手动 push</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;Initial source commit&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>[参考]</p>

<ul>
<li><a href="http://yang3wei.github.io/blog/2013/01/28/zhuan-zai-zai-github-shang-shi-yong-octopress/">zhuan-zai-zai-github-shang-shi-yong-octopress</a></li>
<li><a href="http://www.ikitweb.com/blog/2014/04/11/install-ocotpress-on-mac-and-host-website-on-github/">install-ocotpress-on-mac-and-host-website-on-github</a></li>
<li><a href="http://blog.csdn.net/jackystudio/article/details/16353865">像黑客一样写博客</a></li>
<li><a href="http://blog.segmentfault.com/yaashion_xiang/1190000000364677">http://blog.segmentfault.com/yaashion_xiang/1190000000364677</a></li>
<li><a href="http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/">http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/</a></li>
</ul>


<p class='post-footer'>&nbsp;原文地址：<a href='http://starsea.github.io/posts/install-octopress-on-mac-os-x-10-dot-9/'>http://starsea.github.io/posts/install-octopress-on-mac-os-x-10-dot-9/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 阅读笔记(一)]]></title>
    <link href="http://starsea.github.io/posts/git-read-note-1/"/>
    <updated>2014-05-09T11:18:15+08:00</updated>
    <id>http://starsea.github.io/posts/git-read-note-1</id>
    <content type="html"><![CDATA[<p>设置参数
<code>git config —global  user.name 'starsea'</code></p>

<ul>
<li>system 编辑 /etc/gitconfig</li>
<li>global 编辑 ~/.gitconfig</li>
<li>不带参数 编辑 .git/config</li>
</ul>


<p>以上依次覆盖配置参数</p>

<p>本篇文章将记录  <code>git config diff igonre add</code> 等基础命令.</p>

<!--more-->


<h2>git add</h2>

<blockquote><p>这是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等</p></blockquote>

<p>如果已经<code>git add</code>一个文件了，再对它进行修改 那么运行<code>git status</code>会发现该文件出现<strong>两次</strong>实际上 Git 只不过暂存了你运行 <code>git add</code> 命令时的版本，如果现在提交，那么提交的是添加注释前的版本，而非当前工作目录中的版本。所以，运行了 <code>git add</code> 之后又作了修订的文件，需要重新运行 <code>git add</code> 把最新版本重新暂存起来：</p>

<h2>gitignore</h2>

<h4>规范：</h4>

<ul>
<li>所有空行或者以注释符号 <code>＃</code> 开头的行都会被 Git 忽略。</li>
<li>可以使用标准的 <code>glob</code> 模式匹配。</li>
<li>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的是目录。</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li>
</ul>


<h4>什么是glob模式</h4>

<blockquote><p>所谓的 <code>glob</code> 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。</p></blockquote>

<pre><code># 此为注释 – 将被 Git 忽略
# 忽略所有 .a 结尾的文件
*.a
# 但 lib.a 除外
!lib.a
# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
/TODO
# 忽略 build/ 目录下的所有文件
build/
# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
doc/*.txt
# ignore all .txt files in the doc/ directory
doc/**/*.txt
</code></pre>

<h2>git diff</h2>

<ul>
<li><code>git diff</code> 比较当前文件和暂存区的差异</li>
<li><code>git diff --cached</code> 比较暂存区和仓库里的快照差异</li>
</ul>


<h2>获取配置</h2>

<pre><code>[haidx@mbp:~/www/cmp]$ git config --list
user.email=xxx@gmail.com
user.name=starsea
core.excludesfile=/Users/haidx/.gitignore
core.autocrlf=input
alias.lg=log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
core.precomposeunicode=false
remote.origin.url=git@github.com:starsea/cmp.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
</code></pre>

<h2>获取本地配置</h2>

<pre><code>[haidx@mbp:~/www/cmp]$ git config --local --list
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
core.precomposeunicode=false
remote.origin.url=git@github.com:starsea/cmp.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master


[haidx@mbp:~/www/cmp]$ cat .git/config
[core]
     repositoryformatversion = 0
     filemode = true
     bare = false
     logallrefupdates = true
     ignorecase = true
     precomposeunicode = false
[remote "origin"]
     url = git@github.com:starsea/cmp.git
     fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
     remote = origin
     merge = refs/heads/master
</code></pre>

<p class='post-footer'>&nbsp;原文地址：<a href='http://starsea.github.io/posts/git-read-note-1/'>http://starsea.github.io/posts/git-read-note-1/</a><br/>&nbsp;版权声明：自由转载-非商用-非衍生-保持署名| <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a></p>

]]></content>
  </entry>
  
</feed>
