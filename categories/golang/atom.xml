<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golang | Starsea's Note]]></title>
  <link href="http://starsea.github.io/categories/golang/atom.xml" rel="self"/>
  <link href="http://starsea.github.io/"/>
  <updated>2019-01-10T20:17:17+08:00</updated>
  <id>http://starsea.github.io/</id>
  <author>
    <name><![CDATA[starsea]]></name>
    <email><![CDATA[starsea820@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Golang 拾遗（一）之依赖处理]]></title>
    <link href="http://starsea.github.io/posts/golang-dependency-proxy/"/>
    <updated>2019-01-10T19:39:53+08:00</updated>
    <id>http://starsea.github.io/posts/golang-dependency-proxy</id>
    <content type="html"><![CDATA[<h2>Git Clone</h2>

<p><code>git clone ssh</code> 调用的是 <code>ssh</code></p>

<p><code>git clone http</code> 调用的是 <code>git-remote-http</code></p>

<p><code>git clone https</code> 调用的是 <code>git-remote-https</code></p>

<h2>Go Get</h2>

<p>go get 会把库安装到Gopath 下</p>

<p>比如我的GOPATH 是 <code>~/work/xinyue/go</code>  执行命令 <code>go get github.com/BurntSushi/toml</code></p>

<p>那么库会被安装到 <code>~/work/xinyue/go/src/github.com/BurntSushi/toml</code></p>

<!-- more -->


<h3>本质</h3>

<p>Go Get 本质是调用git 我们可以通过制定git配置的代理来配置一些东西</p>

<p>vim ~/.gitconfig</p>

<p>```</p>

<h1>Demo</h1>

<p>[http &ldquo;<a href="https://domain.com">https://domain.com</a>&rdquo;]</p>

<pre><code>proxy = http://proxyUsername:proxyPassword@proxy.server.com:port
sslVerify = false
</code></pre>

<p>[http &ldquo;<a href="https://git.code.oa.com">https://git.code.oa.com</a>&rdquo;]</p>

<pre><code>  proxy = http://127.0.0.1:12639
</code></pre>

<p>[http &ldquo;<a href="http://git.code.oa.com">http://git.code.oa.com</a>&rdquo;]</p>

<pre><code>  proxy = http://127.0.0.1:12639
</code></pre>

<p>```</p>

<p>有时候我们笔记本电脑有时候在家里办公 有时候在公司办公 需要经常切换网络环境 如果每次来还切换配置文件就很麻烦 幸好我们有可视化的软件 <code>proxifier</code></p>

<h3>自动配置</h3>

<p><code>Go Get</code> 调用<code>Git</code>  <code>Git</code> 其实调用的是 <code>git-remote-https</code> 这个二进制程序去抓取远程内容 我们配置规则即可</p>

<p><img src="media/15468459121385/15471079183836.jpg" alt="" /></p>

<p>如上所示 我们配置了两行规则 第一行当调用git.code.oa.com 的时候 走内网代理 其他的全部是走外网代理。</p>

<h2>Glide</h2>

<p>Glide 是Go用的最多的依赖管理工具 这里不做更多赘述</p>

<p>唯一需要注意的是glide 默认用的是https 有时候我们访问一些仓库如果用https（比如公司的内网仓库）需要手动输入密码  我们希望指定能通过ssh免密</p>

<p>可以通过git修改 ( 因为glide拉取git类型仓库的时候还是会去调用git )</p>

<p><code>
git config --global url."user@git.private.com:".insteadOf "https://git.private.com"
</code></p>

<p>或者我们直接修改glide.yaml 文件 指定访问方式 比如</p>

<p><code>
package: native
import:
- package: git.code.oa.com/up-common/go-http-core
  repo: git@git.code.oa.com:up-common/go-http-core.git
  vcs: git
  subpackages:
  - middleware/jce
- package: github.com/BurntSushi/toml
  version: ~0.3.1
- package: github.com/gin-gonic/gin
  version: ~1.3.0
- package: github.com/mcuadros/go-version
- package: gojce
  repo: git@git.code.oa.com:up-common/gojce.git
  vcs: git
</code></p>

<p>我们所想Glide的代理怎么配置 //todo</p>

<h2>参阅</h2>

<ul>
<li><a href="https://gist.github.com/evantoli/f8c23a37eb3558ab8765">https://gist.github.com/evantoli/f8c23a37eb3558ab8765</a> git proxy</li>
<li><a href="https://github.com/Masterminds/glide/wiki/Go-Package-Manager-Comparison">https://github.com/Masterminds/glide/wiki/Go-Package-Manager-Comparison</a> Go包管理</li>
<li><a href="https://github.com/Masterminds/glide/issues/836">https://github.com/Masterminds/glide/issues/836</a> glide ssh</li>
</ul>

]]></content>
  </entry>
  
</feed>
